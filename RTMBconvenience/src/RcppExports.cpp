// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "RTMBconvenience_types.hpp"
#include <Rcpp.h>
#include <RTMB.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pnchisq_ad
ADrep pnchisq_ad(ADrep x, ADrep df, ADrep ncp, bool lower_tail, bool log_p);
RcppExport SEXP _RTMBconvenience_pnchisq_ad(SEXP xSEXP, SEXP dfSEXP, SEXP ncpSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type df(dfSEXP);
    Rcpp::traits::input_parameter< ADrep >::type ncp(ncpSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pnchisq_ad(x, df, ncp, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// pnorm5_ad
ADrep pnorm5_ad(ADrep x, ADrep mu, ADrep sigma, bool lower_tail, bool log_p);
RcppExport SEXP _RTMBconvenience_pnorm5_ad(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type mu(muSEXP);
    Rcpp::traits::input_parameter< ADrep >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pnorm5_ad(x, mu, sigma, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qnorm5_ad
ADrep qnorm5_ad(ADrep x, ADrep mu, ADrep sigma, bool lower_tail, bool log_p);
RcppExport SEXP _RTMBconvenience_qnorm5_ad(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type mu(muSEXP);
    Rcpp::traits::input_parameter< ADrep >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qnorm5_ad(x, mu, sigma, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// log_ipnorm_ad
ADrep log_ipnorm_ad(ADrep x, ADrep y, ADrep mu, ADrep sigma);
RcppExport SEXP _RTMBconvenience_log_ipnorm_ad(SEXP xSEXP, SEXP ySEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type y(ySEXP);
    Rcpp::traits::input_parameter< ADrep >::type mu(muSEXP);
    Rcpp::traits::input_parameter< ADrep >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_ipnorm_ad(x, y, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// pt_ad
ADrep pt_ad(ADrep x, ADrep df, bool lower_tail, bool log_p);
RcppExport SEXP _RTMBconvenience_pt_ad(SEXP xSEXP, SEXP dfSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pt_ad(x, df, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qt_ad
ADrep qt_ad(ADrep p, ADrep df, bool lower_tail, bool log_p);
RcppExport SEXP _RTMBconvenience_qt_ad(SEXP pSEXP, SEXP dfSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type p(pSEXP);
    Rcpp::traits::input_parameter< ADrep >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qt_ad(p, df, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// pde_scheme_ad
ADrep pde_scheme_ad(ADrep x);
RcppExport SEXP _RTMBconvenience_pde_scheme_ad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pde_scheme_ad(x));
    return rcpp_result_gen;
END_RCPP
}
// logspace_add_ad
ADrep logspace_add_ad(ADrep x, ADrep y);
RcppExport SEXP _RTMBconvenience_logspace_add_ad(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(logspace_add_ad(x, y));
    return rcpp_result_gen;
END_RCPP
}
// logspace_sum_ad
ADrep logspace_sum_ad(ADrep x);
RcppExport SEXP _RTMBconvenience_logspace_sum_ad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logspace_sum_ad(x));
    return rcpp_result_gen;
END_RCPP
}
// logspace_sub_ad
ADrep logspace_sub_ad(ADrep x, ADrep y);
RcppExport SEXP _RTMBconvenience_logspace_sub_ad(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(logspace_sub_ad(x, y));
    return rcpp_result_gen;
END_RCPP
}
// quantreg_ad
ADrep quantreg_ad(ADrep x, ADrep tau);
RcppExport SEXP _RTMBconvenience_quantreg_ad(SEXP xSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(quantreg_ad(x, tau));
    return rcpp_result_gen;
END_RCPP
}
// login_log_besselI_ad
ADrep login_log_besselI_ad(ADrep logx, ADrep nu);
RcppExport SEXP _RTMBconvenience_login_log_besselI_ad(SEXP logxSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type logx(logxSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(login_log_besselI_ad(logx, nu));
    return rcpp_result_gen;
END_RCPP
}
// log_besselI_ad
ADrep log_besselI_ad(ADrep x, ADrep nu);
RcppExport SEXP _RTMBconvenience_log_besselI_ad(SEXP xSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(log_besselI_ad(x, nu));
    return rcpp_result_gen;
END_RCPP
}
// log_MarcumQ_ad
ADrep log_MarcumQ_ad(ADrep a, ADrep b, ADrep nu);
RcppExport SEXP _RTMBconvenience_log_MarcumQ_ad(SEXP aSEXP, SEXP bSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type a(aSEXP);
    Rcpp::traits::input_parameter< ADrep >::type b(bSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(log_MarcumQ_ad(a, b, nu));
    return rcpp_result_gen;
END_RCPP
}
// login_log_MarcumQ_ad
ADrep login_log_MarcumQ_ad(ADrep loga, ADrep logb, ADrep nu);
RcppExport SEXP _RTMBconvenience_login_log_MarcumQ_ad(SEXP logaSEXP, SEXP logbSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type loga(logaSEXP);
    Rcpp::traits::input_parameter< ADrep >::type logb(logbSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(login_log_MarcumQ_ad(loga, logb, nu));
    return rcpp_result_gen;
END_RCPP
}
// log_Marcum1mQ_ad
ADrep log_Marcum1mQ_ad(ADrep a, ADrep b, ADrep nu);
RcppExport SEXP _RTMBconvenience_log_Marcum1mQ_ad(SEXP aSEXP, SEXP bSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type a(aSEXP);
    Rcpp::traits::input_parameter< ADrep >::type b(bSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(log_Marcum1mQ_ad(a, b, nu));
    return rcpp_result_gen;
END_RCPP
}
// login_log_Marcum1mQ_ad
ADrep login_log_Marcum1mQ_ad(ADrep loga, ADrep logb, ADrep nu);
RcppExport SEXP _RTMBconvenience_login_log_Marcum1mQ_ad(SEXP logaSEXP, SEXP logbSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type loga(logaSEXP);
    Rcpp::traits::input_parameter< ADrep >::type logb(logbSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(login_log_Marcum1mQ_ad(loga, logb, nu));
    return rcpp_result_gen;
END_RCPP
}
// logdrice_ad
ADrep logdrice_ad(ADrep logx, ADrep lognu, ADrep logsigma);
RcppExport SEXP _RTMBconvenience_logdrice_ad(SEXP logxSEXP, SEXP lognuSEXP, SEXP logsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type logx(logxSEXP);
    Rcpp::traits::input_parameter< ADrep >::type lognu(lognuSEXP);
    Rcpp::traits::input_parameter< ADrep >::type logsigma(logsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(logdrice_ad(logx, lognu, logsigma));
    return rcpp_result_gen;
END_RCPP
}
// logprice_ad
ADrep logprice_ad(ADrep logx, ADrep lognu, ADrep logsigma, bool lower_tail);
RcppExport SEXP _RTMBconvenience_logprice_ad(SEXP logxSEXP, SEXP lognuSEXP, SEXP logsigmaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type logx(logxSEXP);
    Rcpp::traits::input_parameter< ADrep >::type lognu(lognuSEXP);
    Rcpp::traits::input_parameter< ADrep >::type logsigma(logsigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(logprice_ad(logx, lognu, logsigma, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// sparse_solve_ad
ADrep sparse_solve_ad(Rcpp::RObject& x, ADrep& y);
RcppExport SEXP _RTMBconvenience_sparse_solve_ad(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject& >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_solve_ad(x, y));
    return rcpp_result_gen;
END_RCPP
}
// sparse_solve_ptr_ad
Rcpp::XPtr<Eigen::SparseLU< Eigen::SparseMatrix<ad>, Eigen::COLAMDOrdering<int> >> sparse_solve_ptr_ad(Rcpp::RObject& x);
RcppExport SEXP _RTMBconvenience_sparse_solve_ptr_ad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_solve_ptr_ad(x));
    return rcpp_result_gen;
END_RCPP
}
// sparse_solve_ptr_update_ad
void sparse_solve_ptr_update_ad(Rcpp::XPtr<Eigen::SparseLU< Eigen::SparseMatrix<ad>, Eigen::COLAMDOrdering<int> >>& ss, Rcpp::RObject& x);
RcppExport SEXP _RTMBconvenience_sparse_solve_ptr_update_ad(SEXP ssSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Eigen::SparseLU< Eigen::SparseMatrix<ad>, Eigen::COLAMDOrdering<int> >>& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject& >::type x(xSEXP);
    sparse_solve_ptr_update_ad(ss, x);
    return R_NilValue;
END_RCPP
}
// sparse_solve_ptr_eval_ad
ADrep sparse_solve_ptr_eval_ad(Rcpp::XPtr<Eigen::SparseLU< Eigen::SparseMatrix<ad>, Eigen::COLAMDOrdering<int> >>& ss, ADrep& y);
RcppExport SEXP _RTMBconvenience_sparse_solve_ptr_eval_ad(SEXP ssSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Eigen::SparseLU< Eigen::SparseMatrix<ad>, Eigen::COLAMDOrdering<int> >>& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< ADrep& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_solve_ptr_eval_ad(ss, y));
    return rcpp_result_gen;
END_RCPP
}
// sparse_solve_NotAD
Rcpp::NumericMatrix sparse_solve_NotAD(Rcpp::S4& x, Rcpp::NumericMatrix& y);
RcppExport SEXP _RTMBconvenience_sparse_solve_NotAD(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_solve_NotAD(x, y));
    return rcpp_result_gen;
END_RCPP
}
// sparse_solve_ptr_NotAD
Rcpp::XPtr<Eigen::SparseLU< Eigen::SparseMatrix<double>, Eigen::COLAMDOrdering<int> >> sparse_solve_ptr_NotAD(Rcpp::S4& x);
RcppExport SEXP _RTMBconvenience_sparse_solve_ptr_NotAD(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_solve_ptr_NotAD(x));
    return rcpp_result_gen;
END_RCPP
}
// sparse_solve_ptr_update_NotAD
void sparse_solve_ptr_update_NotAD(Rcpp::XPtr<Eigen::SparseLU< Eigen::SparseMatrix<double>, Eigen::COLAMDOrdering<int> >>& ss, Rcpp::S4& x);
RcppExport SEXP _RTMBconvenience_sparse_solve_ptr_update_NotAD(SEXP ssSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Eigen::SparseLU< Eigen::SparseMatrix<double>, Eigen::COLAMDOrdering<int> >>& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type x(xSEXP);
    sparse_solve_ptr_update_NotAD(ss, x);
    return R_NilValue;
END_RCPP
}
// sparse_solve_ptr_eval_NotAD
Rcpp::NumericMatrix sparse_solve_ptr_eval_NotAD(Rcpp::XPtr<Eigen::SparseLU< Eigen::SparseMatrix<double>, Eigen::COLAMDOrdering<int> >>& ss, Rcpp::NumericMatrix& y);
RcppExport SEXP _RTMBconvenience_sparse_solve_ptr_eval_NotAD(SEXP ssSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Eigen::SparseLU< Eigen::SparseMatrix<double>, Eigen::COLAMDOrdering<int> >>& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_solve_ptr_eval_NotAD(ss, y));
    return rcpp_result_gen;
END_RCPP
}
// distr_dkwnorm
ADrep distr_dkwnorm(ADrep x, ADrep mu, ADrep sigma, ADrep a, ADrep b, bool give_log);
RcppExport SEXP _RTMBconvenience_distr_dkwnorm(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type mu(muSEXP);
    Rcpp::traits::input_parameter< ADrep >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< ADrep >::type a(aSEXP);
    Rcpp::traits::input_parameter< ADrep >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dkwnorm(x, mu, sigma, a, b, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_pkwnorm
ADrep distr_pkwnorm(ADrep x, ADrep mu, ADrep sigma, ADrep a, ADrep b, bool lower_tail, bool give_log);
RcppExport SEXP _RTMBconvenience_distr_pkwnorm(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type mu(muSEXP);
    Rcpp::traits::input_parameter< ADrep >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< ADrep >::type a(aSEXP);
    Rcpp::traits::input_parameter< ADrep >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_pkwnorm(x, mu, sigma, a, b, lower_tail, give_log));
    return rcpp_result_gen;
END_RCPP
}
// spline_bcspline
ADrep spline_bcspline(ADrep x, Rcpp::NumericVector knots, ADrep pars);
RcppExport SEXP _RTMBconvenience_spline_bcspline(SEXP xSEXP, SEXP knotsSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< ADrep >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(spline_bcspline(x, knots, pars));
    return rcpp_result_gen;
END_RCPP
}
// spline_ibcspline
ADrep spline_ibcspline(ADrep x, Rcpp::NumericVector knots, ADrep pars);
RcppExport SEXP _RTMBconvenience_spline_ibcspline(SEXP xSEXP, SEXP knotsSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< ADrep >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(spline_ibcspline(x, knots, pars));
    return rcpp_result_gen;
END_RCPP
}
// spline_ibcdspline
ADrep spline_ibcdspline(ADrep x, Rcpp::NumericVector knots, ADrep pars);
RcppExport SEXP _RTMBconvenience_spline_ibcdspline(SEXP xSEXP, SEXP knotsSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< ADrep >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(spline_ibcdspline(x, knots, pars));
    return rcpp_result_gen;
END_RCPP
}
// spline_ibcispline
ADrep spline_ibcispline(ADrep x, Rcpp::NumericVector knots, ADrep pars);
RcppExport SEXP _RTMBconvenience_spline_ibcispline(SEXP xSEXP, SEXP knotsSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< ADrep >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(spline_ibcispline(x, knots, pars));
    return rcpp_result_gen;
END_RCPP
}
// spline_iibcspline
ADrep spline_iibcspline(ADrep x, Rcpp::NumericVector knots, ADrep pars);
RcppExport SEXP _RTMBconvenience_spline_iibcspline(SEXP xSEXP, SEXP knotsSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< ADrep >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(spline_iibcspline(x, knots, pars));
    return rcpp_result_gen;
END_RCPP
}
// spline_iibcdspline
ADrep spline_iibcdspline(ADrep x, Rcpp::NumericVector knots, ADrep pars);
RcppExport SEXP _RTMBconvenience_spline_iibcdspline(SEXP xSEXP, SEXP knotsSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< ADrep >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(spline_iibcdspline(x, knots, pars));
    return rcpp_result_gen;
END_RCPP
}
// spline_iibcispline
ADrep spline_iibcispline(ADrep x, Rcpp::NumericVector knots, ADrep pars);
RcppExport SEXP _RTMBconvenience_spline_iibcispline(SEXP xSEXP, SEXP knotsSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< ADrep >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(spline_iibcispline(x, knots, pars));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RTMBconvenience_pnchisq_ad", (DL_FUNC) &_RTMBconvenience_pnchisq_ad, 5},
    {"_RTMBconvenience_pnorm5_ad", (DL_FUNC) &_RTMBconvenience_pnorm5_ad, 5},
    {"_RTMBconvenience_qnorm5_ad", (DL_FUNC) &_RTMBconvenience_qnorm5_ad, 5},
    {"_RTMBconvenience_log_ipnorm_ad", (DL_FUNC) &_RTMBconvenience_log_ipnorm_ad, 4},
    {"_RTMBconvenience_pt_ad", (DL_FUNC) &_RTMBconvenience_pt_ad, 4},
    {"_RTMBconvenience_qt_ad", (DL_FUNC) &_RTMBconvenience_qt_ad, 4},
    {"_RTMBconvenience_pde_scheme_ad", (DL_FUNC) &_RTMBconvenience_pde_scheme_ad, 1},
    {"_RTMBconvenience_logspace_add_ad", (DL_FUNC) &_RTMBconvenience_logspace_add_ad, 2},
    {"_RTMBconvenience_logspace_sum_ad", (DL_FUNC) &_RTMBconvenience_logspace_sum_ad, 1},
    {"_RTMBconvenience_logspace_sub_ad", (DL_FUNC) &_RTMBconvenience_logspace_sub_ad, 2},
    {"_RTMBconvenience_quantreg_ad", (DL_FUNC) &_RTMBconvenience_quantreg_ad, 2},
    {"_RTMBconvenience_login_log_besselI_ad", (DL_FUNC) &_RTMBconvenience_login_log_besselI_ad, 2},
    {"_RTMBconvenience_log_besselI_ad", (DL_FUNC) &_RTMBconvenience_log_besselI_ad, 2},
    {"_RTMBconvenience_log_MarcumQ_ad", (DL_FUNC) &_RTMBconvenience_log_MarcumQ_ad, 3},
    {"_RTMBconvenience_login_log_MarcumQ_ad", (DL_FUNC) &_RTMBconvenience_login_log_MarcumQ_ad, 3},
    {"_RTMBconvenience_log_Marcum1mQ_ad", (DL_FUNC) &_RTMBconvenience_log_Marcum1mQ_ad, 3},
    {"_RTMBconvenience_login_log_Marcum1mQ_ad", (DL_FUNC) &_RTMBconvenience_login_log_Marcum1mQ_ad, 3},
    {"_RTMBconvenience_logdrice_ad", (DL_FUNC) &_RTMBconvenience_logdrice_ad, 3},
    {"_RTMBconvenience_logprice_ad", (DL_FUNC) &_RTMBconvenience_logprice_ad, 4},
    {"_RTMBconvenience_sparse_solve_ad", (DL_FUNC) &_RTMBconvenience_sparse_solve_ad, 2},
    {"_RTMBconvenience_sparse_solve_ptr_ad", (DL_FUNC) &_RTMBconvenience_sparse_solve_ptr_ad, 1},
    {"_RTMBconvenience_sparse_solve_ptr_update_ad", (DL_FUNC) &_RTMBconvenience_sparse_solve_ptr_update_ad, 2},
    {"_RTMBconvenience_sparse_solve_ptr_eval_ad", (DL_FUNC) &_RTMBconvenience_sparse_solve_ptr_eval_ad, 2},
    {"_RTMBconvenience_sparse_solve_NotAD", (DL_FUNC) &_RTMBconvenience_sparse_solve_NotAD, 2},
    {"_RTMBconvenience_sparse_solve_ptr_NotAD", (DL_FUNC) &_RTMBconvenience_sparse_solve_ptr_NotAD, 1},
    {"_RTMBconvenience_sparse_solve_ptr_update_NotAD", (DL_FUNC) &_RTMBconvenience_sparse_solve_ptr_update_NotAD, 2},
    {"_RTMBconvenience_sparse_solve_ptr_eval_NotAD", (DL_FUNC) &_RTMBconvenience_sparse_solve_ptr_eval_NotAD, 2},
    {"_RTMBconvenience_distr_dkwnorm", (DL_FUNC) &_RTMBconvenience_distr_dkwnorm, 6},
    {"_RTMBconvenience_distr_pkwnorm", (DL_FUNC) &_RTMBconvenience_distr_pkwnorm, 7},
    {"_RTMBconvenience_spline_bcspline", (DL_FUNC) &_RTMBconvenience_spline_bcspline, 3},
    {"_RTMBconvenience_spline_ibcspline", (DL_FUNC) &_RTMBconvenience_spline_ibcspline, 3},
    {"_RTMBconvenience_spline_ibcdspline", (DL_FUNC) &_RTMBconvenience_spline_ibcdspline, 3},
    {"_RTMBconvenience_spline_ibcispline", (DL_FUNC) &_RTMBconvenience_spline_ibcispline, 3},
    {"_RTMBconvenience_spline_iibcspline", (DL_FUNC) &_RTMBconvenience_spline_iibcspline, 3},
    {"_RTMBconvenience_spline_iibcdspline", (DL_FUNC) &_RTMBconvenience_spline_iibcdspline, 3},
    {"_RTMBconvenience_spline_iibcispline", (DL_FUNC) &_RTMBconvenience_spline_iibcispline, 3},
    {NULL, NULL, 0}
};

void rtmb_set_shared_pointers();
RcppExport void R_init_RTMBconvenience(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    rtmb_set_shared_pointers();
}
